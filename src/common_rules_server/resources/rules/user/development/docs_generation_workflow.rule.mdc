---
description:
globs:
alwaysApply: false
---
// DocsGenerationWorkflow Rule - Pseudocode

/*
Expected Output Template (Markdown):

# Documentation Generation Workflow

## Current Phase
- Phase: <requirements|analysis|planning|stakeholder_input>
- Feature/Change: <description>
- Status: <pending|in_progress|completed>

## Requirements Analysis
- Clear Statement: <requirement>
- Current Flow: <analysis>
- Open Questions: <list>
- Stakeholder Questionnaire: <file>

## Strategy Analysis
- Options: <list>
- Pros/Cons: <table>
- Impact Analysis: <business|technical|compliance>
- Recommended Strategy: <strategy>

## Planning Checklist
- <task 1>
- <task 2>
...
*/

var current_phase = input.phase // "requirements", "analysis", "planning", "stakeholder_input"
var feature_description = input.feature_description
var context = input.context

var status = "pending"
var clear_statement = ""
var current_flow_analysis = ""
var open_questions = []
var stakeholder_questionnaire = ""
var strategy_options = []
var pros_cons = []
var impact_analysis = {
    "business": [],
    "technical": [],
    "compliance": []
}
var recommended_strategy = ""
var planning_checklist = []

if current_phase == "requirements":
    // Requirements Analysis Phase
    status = "in_progress"
    
    // Generate clear statement of requirement
    clear_statement = GenerateClearStatement(feature_description, context)
    
    // Analyze current flow
    current_flow_analysis = AnalyzeCurrentFlow(feature_description, context)
    
    // Identify open questions
    open_questions = IdentifyOpenQuestions(feature_description, context)
    
    // Create stakeholder questionnaire if needed
    if open_questions.length > 0:
        stakeholder_questionnaire = CreateStakeholderQuestionnaire(open_questions, feature_description)
        status = "completed"
        // Next phase would be stakeholder_input
    else:
        status = "completed"
        // Next phase would be analysis

else if current_phase == "analysis":
    // Strategy Analysis Phase
    status = "in_progress"
    
    // Generate strategy options
    strategy_options = GenerateStrategyOptions(feature_description, context)
    
    // Analyze pros and cons for each option
    for option in strategy_options:
        var analysis = AnalyzeOption(option, context)
        pros_cons.append({
            "option": option,
            "pros": analysis.pros,
            "cons": analysis.cons
        })
    
    // Perform impact analysis
    for option in strategy_options:
        var business_impact = AnalyzeBusinessImpact(option, context)
        var technical_impact = AnalyzeTechnicalImpact(option, context)
        var compliance_impact = AnalyzeComplianceImpact(option, context)
        
        impact_analysis.business.append(business_impact)
        impact_analysis.technical.append(technical_impact)
        impact_analysis.compliance.append(compliance_impact)
    
    // Recommend best strategy
    recommended_strategy = RecommendStrategy(strategy_options, pros_cons, impact_analysis)
    status = "completed"

else if current_phase == "planning":
    // Planning Phase
    status = "in_progress"
    
    // Generate planning checklist
    planning_checklist = GeneratePlanningChecklist(recommended_strategy, context)
    
    // Validate checklist completeness
    var validation_result = ValidateChecklist(planning_checklist, context)
    if validation_result.valid:
        status = "completed"
    else:
        // Add missing items to checklist
        for missing_item in validation_result.missing_items:
            planning_checklist.append(missing_item)
        status = "completed"

else if current_phase == "stakeholder_input":
    // Stakeholder Input Phase
    status = "in_progress"
    
    // Process stakeholder responses
    var stakeholder_responses = ProcessStakeholderResponses(stakeholder_questionnaire)
    
    // Update requirements based on input
    clear_statement = UpdateClearStatement(clear_statement, stakeholder_responses)
    open_questions = UpdateOpenQuestions(open_questions, stakeholder_responses)
    
    // If all questions answered, move to analysis
    if open_questions.length == 0:
        status = "completed"
        // Next phase would be analysis
    else:
        // Update questionnaire with remaining questions
        stakeholder_questionnaire = UpdateStakeholderQuestionnaire(open_questions, feature_description)
        status = "completed"

function RenderDocsGenerationWorkflowMarkdown(current_phase, feature_description, status, clear_statement, current_flow_analysis, open_questions, stakeholder_questionnaire, strategy_options, pros_cons, impact_analysis, recommended_strategy, planning_checklist) {
    var md = "# Documentation Generation Workflow\n\n"
    md += "## Current Phase\n"
    md += "- Phase: " + current_phase + "\n"
    md += "- Feature/Change: " + feature_description + "\n"
    md += "- Status: " + status + "\n\n"
    
    if clear_statement:
        md += "## Requirements Analysis\n"
        md += "- Clear Statement: " + clear_statement + "\n"
        if current_flow_analysis:
            md += "- Current Flow: " + current_flow_analysis + "\n"
        if open_questions.length > 0:
            md += "- Open Questions:\n"
            for question in open_questions:
                md += "  - " + question + "\n"
        if stakeholder_questionnaire:
            md += "- Stakeholder Questionnaire: " + stakeholder_questionnaire + "\n"
        md += "\n"
    
    if strategy_options.length > 0:
        md += "## Strategy Analysis\n"
        md += "- Options:\n"
        for option in strategy_options:
            md += "  - " + option + "\n"
        if pros_cons.length > 0:
            md += "- Pros/Cons:\n"
            for analysis in pros_cons:
                md += "  - " + analysis.option + ":\n"
                md += "    - Pros: " + analysis.pros.join(", ") + "\n"
                md += "    - Cons: " + analysis.cons.join(", ") + "\n"
        if recommended_strategy:
            md += "- Recommended Strategy: " + recommended_strategy + "\n"
        md += "\n"
    
    if planning_checklist.length > 0:
        md += "## Planning Checklist\n"
        for task in planning_checklist:
            md += "- " + task + "\n"
    
    return md
}

var output_file = "planning/documentation/docs_generation_workflow{YYYY-MM-dd-hh-mm-ss}.md"
var markdown = RenderDocsGenerationWorkflowMarkdown(current_phase, feature_description, status, clear_statement, current_flow_analysis, open_questions, stakeholder_questionnaire, strategy_options, pros_cons, impact_analysis, recommended_strategy, planning_checklist)
WriteFile(output_file, markdown)

return {
    "output_file": output_file,
    "current_phase": current_phase,
    "feature_description": feature_description,
    "status": status,
    "clear_statement": clear_statement,
    "current_flow_analysis": current_flow_analysis,
    "open_questions": open_questions,
    "stakeholder_questionnaire": stakeholder_questionnaire,
    "strategy_options": strategy_options,
    "pros_cons": pros_cons,
    "impact_analysis": impact_analysis,
    "recommended_strategy": recommended_strategy,
    "planning_checklist": planning_checklist,
    "phase_complete": status == "completed",
    "ready_for_next_phase": status == "completed"
}
