---
description:
globs:
alwaysApply: false
---
// ComplianceConfirmation Rule - Pseudocode

/*
Expected Output Template (Markdown):

# Compliance Confirmation

## Documentation Status
- README.md: <exists|missing>
- ARCHITECTURE.md: <exists|missing>
- Compliance Requirements Documented: <yes|no>

## Project Structure Confirmation
- Workspace root: <path>
- Current working directory: <path>
- Project structure verified: <yes/no>
- Build commands will be executed from: <path>
- Supporting evidence: <docs/filename.md>

Relevant project structure for this task:
1. <Relevant component 1>
2. <Relevant component 2>
...

## Compliance Confirmation
I confirm that all changes made comply with:
- Project architecture as defined in README.md and ARCHITECTURE.md
- Development process as documented in project files
- Supporting evidence: <docs/filename.md>

### Architecture Compliance
1. <Specific alignment with architecture requirement 1>
2. <Specific alignment with architecture requirement 2>
...

### Development Process Compliance
1. Documentation was updated first before implementation
2. Tests were written before implementing functionality
3. All verification steps have passed using documented process

[If applicable] Approved deviations:
- <Specific deviation and approval reference>
*/

var current_state = input.current_state
var context = input.context
var task_type = input.task_type // "beginning", "end", or "requirements"

var documentation_status = {
    "readme_exists": false,
    "architecture_exists": false,
    "compliance_requirements_documented": false
}

// Check documentation status first
var readme_exists = FileExists("README.md")
var architecture_exists = FileExists("ARCHITECTURE.md")

documentation_status.readme_exists = readme_exists
documentation_status.architecture_exists = architecture_exists

if !readme_exists || !architecture_exists:
    // Documentation is missing - instruct Agent to ask user
    var agent_instructions = []
    agent_instructions.push("Cannot confirm compliance - README.md and/or ARCHITECTURE.md are missing")
    agent_instructions.push("Ask user to create missing documentation with compliance requirements")
    
    return {
        "output_file": "planning/documentation/compliance_confirmation{YYYY-MM-dd-hh-mm-ss}.md",
        "documentation_status": documentation_status,
        "agent_instructions": agent_instructions,
        "compliance_confirmed": false
    }

// Agent Instructions: Read compliance requirements from documentation
var agent_instructions = []
agent_instructions.push("Read README.md to understand project compliance requirements")
agent_instructions.push("Read ARCHITECTURE.md to understand architectural compliance standards")
agent_instructions.push("Validate compliance against documented requirements")
agent_instructions.push("If compliance requirements are unclear, ask user for clarification")

documentation_status.compliance_requirements_documented = true

if task_type == "beginning":
    var workspace_root = GetWorkspaceRoot()
    var current_dir = GetCurrentDirectory()
    var project_structure_verified = VerifyProjectStructure()
    var build_path = GetBuildCommandPath() // Project-agnostic build path
    var supporting_evidence = GetSupportingEvidence()
    
    var relevant_components = []
    for component in context.project_structure:
        if IsRelevantForTask(component, context.current_task):
            relevant_components.append(component)
    
    function RenderProjectStructureConfirmation(workspace_root, current_dir, project_structure_verified, build_path, supporting_evidence, relevant_components, documentation_status) {
        var md = "# Compliance Confirmation\n\n"
        md += "## Documentation Status\n"
        md += "- README.md: " + (documentation_status.readme_exists ? "exists" : "missing") + "\n"
        md += "- ARCHITECTURE.md: " + (documentation_status.architecture_exists ? "exists" : "missing") + "\n"
        md += "- Compliance Requirements Documented: " + (documentation_status.compliance_requirements_documented ? "yes" : "no") + "\n\n"
        md += "## Project Structure Confirmation\n"
        md += "- Workspace root: " + workspace_root + "\n"
        md += "- Current working directory: " + current_dir + "\n"
        md += "- Project structure verified: " + project_structure_verified + "\n"
        md += "- Build commands will be executed from: " + build_path + "\n"
        md += "- Supporting evidence: " + supporting_evidence + "\n\n"
        md += "Relevant project structure for this task:\n"
        for i, component in relevant_components:
            md += (i + 1) + ". " + component + "\n"
        return md
    }
    
    var output_file = "planning/documentation/compliance_confirmation_beginning{YYYY-MM-dd-hh-mm-ss}.md"
    var markdown = RenderProjectStructureConfirmation(workspace_root, current_dir, project_structure_verified, build_path, supporting_evidence, relevant_components, documentation_status)
    WriteFile(output_file, markdown)
    
    return {
        "output_file": output_file,
        "workspace_root": workspace_root,
        "current_dir": current_dir,
        "project_structure_verified": project_structure_verified,
        "build_path": build_path,
        "supporting_evidence": supporting_evidence,
        "relevant_components": relevant_components,
        "documentation_status": documentation_status,
        "agent_instructions": agent_instructions
    }

else if task_type == "requirements":
    // Requirements compliance check
    var requirements_compliance = []
    var requirements_issues = []
    
    // Agent Instructions: Check requirements compliance
    agent_instructions.push("Read requirements from README.md and ARCHITECTURE.md")
    agent_instructions.push("Validate current task against documented requirements")
    agent_instructions.push("If requirements are unclear, ask user for clarification")
    
    // Note: Actual requirements validation would be done by the Agent
    // based on the documented requirements in README.md and ARCHITECTURE.md
    var requirements_valid = true // Placeholder - Agent would validate requirements
    
    if requirements_valid:
        requirements_compliance.push("Requirements align with documented project requirements")
        requirements_compliance.push("Task scope is within documented project boundaries")
    else:
        requirements_issues.push("Task requirements unclear - ask user for clarification")
        requirements_issues.push("Task scope may exceed documented project boundaries")
    
    function RenderRequirementsCompliance(requirements_compliance, requirements_issues, documentation_status) {
        var md = "# Requirements Compliance Confirmation\n\n"
        md += "## Documentation Status\n"
        md += "- README.md: " + (documentation_status.readme_exists ? "exists" : "missing") + "\n"
        md += "- ARCHITECTURE.md: " + (documentation_status.architecture_exists ? "exists" : "missing") + "\n"
        md += "- Compliance Requirements Documented: " + (documentation_status.compliance_requirements_documented ? "yes" : "no") + "\n\n"
        if requirements_compliance.length > 0:
            md += "## Requirements Compliance\n"
            for i, compliance in requirements_compliance:
                md += (i + 1) + ". " + compliance + "\n"
        if requirements_issues.length > 0:
            md += "\n## Requirements Issues\n"
            for i, issue in requirements_issues:
                md += (i + 1) + ". " + issue + "\n"
        return md
    }
    
    var output_file = "planning/documentation/compliance_confirmation_requirements{YYYY-MM-dd-hh-mm-ss}.md"
    var markdown = RenderRequirementsCompliance(requirements_compliance, requirements_issues, documentation_status)
    WriteFile(output_file, markdown)
    
    return {
        "output_file": output_file,
        "requirements_compliance": requirements_compliance,
        "requirements_issues": requirements_issues,
        "documentation_status": documentation_status,
        "agent_instructions": agent_instructions,
        "requirements_valid": requirements_valid
    }

else if task_type == "end":
    var architecture_compliance = []
    var development_compliance = []
    var approved_deviations = []
    var supporting_evidence = GetSupportingEvidence()
    
    // Agent Instructions: Check final compliance
    agent_instructions.push("Read final compliance requirements from README.md and ARCHITECTURE.md")
    agent_instructions.push("Validate all changes against documented compliance standards")
    agent_instructions.push("If compliance is unclear, ask user for clarification")
    
    // Check architecture compliance using documented requirements
    // Note: Actual compliance checking would be done by the Agent
    // based on the documented requirements in README.md and ARCHITECTURE.md
    var architecture_requirements = ["Architecture pattern compliance", "Code structure compliance", "Build process compliance"]
    for requirement in architecture_requirements:
        var is_compliant = true // Placeholder - Agent would check compliance
        if is_compliant:
            architecture_compliance.push("Compliant with " + requirement + " as documented")
        else:
            approved_deviations.push("Deviation from " + requirement + " - ask user for approval")
    
    // Check development process compliance using documented process
    var process_requirements = ["Documentation first", "Test-driven development", "Verification complete"]
    for requirement in process_requirements:
        var is_compliant = true // Placeholder - Agent would check compliance
        if is_compliant:
            development_compliance.push("Followed " + requirement + " as documented")
        else:
            approved_deviations.push("Deviation from " + requirement + " - ask user for approval")
    
    function RenderComplianceConfirmation(architecture_compliance, development_compliance, approved_deviations, supporting_evidence, documentation_status) {
        var md = "# Compliance Confirmation\n\n"
        md += "## Documentation Status\n"
        md += "- README.md: " + (documentation_status.readme_exists ? "exists" : "missing") + "\n"
        md += "- ARCHITECTURE.md: " + (documentation_status.architecture_exists ? "exists" : "missing") + "\n"
        md += "- Compliance Requirements Documented: " + (documentation_status.compliance_requirements_documented ? "yes" : "no") + "\n\n"
        md += "I confirm that all changes made comply with:\n"
        md += "- Project architecture as defined in README.md and ARCHITECTURE.md\n"
        md += "- Development process as documented in project files\n"
        md += "- Supporting evidence: " + supporting_evidence + "\n\n"
        md += "### Architecture Compliance\n"
        for i, compliance in architecture_compliance:
            md += (i + 1) + ". " + compliance + "\n"
        md += "\n### Development Process Compliance\n"
        for i, compliance in development_compliance:
            md += (i + 1) + ". " + compliance + "\n"
        if approved_deviations.length > 0:
            md += "\n[If applicable] Approved deviations:\n"
            for deviation in approved_deviations:
                md += "- " + deviation + "\n"
        return md
    }
    
    var output_file = "planning/documentation/compliance_confirmation_end{YYYY-MM-dd-hh-mm-ss}.md"
    var markdown = RenderComplianceConfirmation(architecture_compliance, development_compliance, approved_deviations, supporting_evidence, documentation_status)
    WriteFile(output_file, markdown)
    
    return {
        "output_file": output_file,
        "architecture_compliance": architecture_compliance,
        "development_compliance": development_compliance,
        "approved_deviations": approved_deviations,
        "supporting_evidence": supporting_evidence,
        "documentation_status": documentation_status,
        "agent_instructions": agent_instructions,
        "compliance_confirmed": approved_deviations.length == 0
    }
