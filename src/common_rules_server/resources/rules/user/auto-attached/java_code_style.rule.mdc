---
description: 
globs: *.java
alwaysApply: false
---
// JavaCodeStyle Rule - Pseudocode

/*
Expected Output Template (Markdown):

# Java Code Style Validation

## Build Tool Detection
- Detected Tool: <gradle|maven|unknown>
- Checkstyle Config: <path|not_found>
- Suppressions Config: <path|not_found>

## Validation Results
- Status: <pass|fail>
- Violations: <number>
- Warnings: <number>

## Violations Found
- <violation 1>
- <violation 2>
...

## Remediation Steps
- <step 1>
- <step 2>
...
*/

var context = input.context
var java_files = input.java_files

var build_tool = "unknown"
var checkstyle_config = ""
var suppressions_config = ""
var validation_status = "pending"
var violations = []
var warnings = []
var remediation_steps = []

// Step 1: Detect build tool
if FileExists("build.gradle") || FileExists("build.gradle.kts"):
    build_tool = "gradle"
else if FileExists("pom.xml"):
    build_tool = "maven"
else:
    build_tool = "unknown"

// Step 2: Locate checkstyle configuration
var possible_config_paths = [
    "checkstyle.xml",
    "config/checkstyle.xml",
    "build/checkstyle.xml",
    "src/main/resources/checkstyle.xml"
]

for path in possible_config_paths:
    if FileExists(path):
        checkstyle_config = path
        break

var possible_suppressions_paths = [
    "suppressions.xml",
    "config/suppressions.xml",
    "build/suppressions.xml",
    "src/main/resources/suppressions.xml"
]

for path in possible_suppressions_paths:
    if FileExists(path):
        suppressions_config = path
        break

// Step 3: Run checkstyle validation
if build_tool == "gradle":
    var gradle_command = "./gradlew checkstyle"
    var result = ExecuteCommand(gradle_command)
    
    if result.exit_code == 0:
        validation_status = "pass"
    else:
        validation_status = "fail"
        var output_lines = result.stdout.splitlines()
        for line in output_lines:
            if "violation" in line.lower():
                violations.append(line.strip())
            elif "warning" in line.lower():
                warnings.append(line.strip())

else if build_tool == "maven":
    var maven_command = "mvn checkstyle:check"
    var result = ExecuteCommand(maven_command)
    
    if result.exit_code == 0:
        validation_status = "pass"
    else:
        validation_status = "fail"
        var output_lines = result.stdout.splitlines()
        for line in output_lines:
            if "violation" in line.lower():
                violations.append(line.strip())
            elif "warning" in line.lower():
                warnings.append(line.strip())

else:
    // Fallback: Use checkstyle directly if available
    if checkstyle_config:
        var checkstyle_command = "java -jar checkstyle.jar -c " + checkstyle_config + " src/"
        var result = ExecuteCommand(checkstyle_command)
        
        if result.exit_code == 0:
            validation_status = "pass"
        else:
            validation_status = "fail"
            var output_lines = result.stdout.splitlines()
            for line in output_lines:
                if "violation" in line.lower():
                    violations.append(line.strip())
                elif "warning" in line.lower():
                    warnings.append(line.strip())
    else:
        validation_status = "fail"
        violations.append("Checkstyle configuration not found")

// Step 4: Generate remediation steps
if validation_status == "fail":
    if violations.length > 0:
        remediation_steps.append("Fix the following style violations:")
        for violation in violations:
            remediation_steps.append("- " + violation)
    
    if !checkstyle_config:
        remediation_steps.append("Add checkstyle.xml configuration file to the project")
    
    if build_tool == "unknown":
        remediation_steps.append("Specify build tool (Gradle or Maven) for automated validation")

function RenderJavaCodeStyleMarkdown(build_tool, checkstyle_config, suppressions_config, validation_status, violations, warnings, remediation_steps) {
    var md = "# Java Code Style Validation\n\n"
    md += "## Build Tool Detection\n"
    md += "- Detected Tool: " + build_tool + "\n"
    md += "- Checkstyle Config: " + (checkstyle_config || "not_found") + "\n"
    md += "- Suppressions Config: " + (suppressions_config || "not_found") + "\n\n"
    md += "## Validation Results\n"
    md += "- Status: " + validation_status + "\n"
    md += "- Violations: " + violations.length + "\n"
    md += "- Warnings: " + warnings.length + "\n\n"
    
    if violations.length > 0:
        md += "## Violations Found\n"
        for violation in violations:
            md += "- " + violation + "\n"
        md += "\n"
    
    if remediation_steps.length > 0:
        md += "## Remediation Steps\n"
        for step in remediation_steps:
            md += "- " + step + "\n"
    
    return md
}

var output_file = "planning/documentation/java_code_style{YYYY-MM-dd-hh-mm-ss}.md"
var markdown = RenderJavaCodeStyleMarkdown(build_tool, checkstyle_config, suppressions_config, validation_status, violations, warnings, remediation_steps)
WriteFile(output_file, markdown)

return {
    "output_file": output_file,
    "build_tool": build_tool,
    "checkstyle_config": checkstyle_config,
    "suppressions_config": suppressions_config,
    "validation_status": validation_status,
    "violations": violations,
    "warnings": warnings,
    "remediation_steps": remediation_steps,
    "validation_passed": validation_status == "pass"
}

